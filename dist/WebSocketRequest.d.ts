import { WebSocketMessageType, WebSocketRequestBody, WebSocketResponseBody } from './types';
import * as Promise from 'bluebird';
declare type WebSocketRequestOptions = {
    RPCOptions?: any;
    StatusCallback: (req: WebSocketRequest, message: WebSocketResponseBody) => void;
};
declare class WebSocketRequest {
    messageType: WebSocketMessageType;
    id: string;
    operation: string;
    payload: any;
    seshKey: string;
    topic: string;
    internalPromise: Promise<any>;
    wasCancelled: boolean;
    wasError: boolean;
    complete: boolean;
    queueable: boolean;
    hasStatusHandler: boolean;
    statusHandler: (req: WebSocketRequest, msg: WebSocketResponseBody) => void;
    private reqObject;
    private resolver;
    private rejecter;
    static RPC(operation: string, payload: any): WebSocketRequest;
    static RPC(operation: string, payload: any, options: WebSocketRequestOptions): WebSocketRequest;
    static HttpGET(path: string): WebSocketRequest;
    static HttpPOST(path: string, payload: any): WebSocketRequest;
    static HttpPUT(path: string, payload: any): WebSocketRequest;
    static HttpDELETE(path: string): WebSocketRequest;
    static Basic(payload: any): WebSocketRequest;
    static Subscribe(topic: string): WebSocketRequest;
    static UnSubscribe(topic: string): WebSocketRequest;
    static StartSession(userID: string, jwtTicketID: string): WebSocketRequest;
    constructor(messageType: WebSocketMessageType);
    makeRequestObject(): WebSocketRequestBody;
    makeMessage(): string;
    setSeshKey(seshKey: string): this;
    processStatusMessage(message: WebSocketResponseBody): void;
    resolve(response: WebSocketResponseBody): void;
    reject(response: WebSocketResponseBody): void;
    cancel(): void;
}
export default WebSocketRequest;
